apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

/**
 * This is the configuration block to customize your React Native Android app.
 */
react {
    /* Folders */
    root = file("../")
    reactNativeDir = file("../node_modules/react-native")
    codegenDir = file("../node_modules/@react-native/codegen")
    cliFile = file("../node_modules/@react-native-community/cli/index.js")

    /* Variants */
    debuggableVariants = ["debug", "staging"]

    /* Bundling */
    bundleCommand = "ram-bundle"
    bundleAssetName = "ProTour.bundle"
    bundleIn {
        debug {
            bundleIn false
        }
        staging {
            bundleIn true
        }
        release {
            bundleIn true
        }
    }

    /* Hermes Commands */
    hermesCommand = "../../node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc"
    hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.protour.app"
    
    defaultConfig {
        applicationId "com.protour.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        
        // Multidex support for large apps
        multiDexEnabled true
        
        // Flipper
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
        buildConfigField "boolean", "REACT_NATIVE_UNSTABLE_USE_RUNTIME_SCHEDULER_ALWAYS", (findProperty("reactNative.unstable_useRuntimeSchedulerAlways") ?: true).toString()
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        
        staging {
            if (project.hasProperty('PROTOUR_STAGING_UPLOAD_STORE_FILE')) {
                storeFile file(PROTOUR_STAGING_UPLOAD_STORE_FILE)
                storePassword PROTOUR_STAGING_UPLOAD_STORE_PASSWORD
                keyAlias PROTOUR_STAGING_UPLOAD_KEY_ALIAS
                keyPassword PROTOUR_STAGING_UPLOAD_KEY_PASSWORD
            }
        }
        
        release {
            if (project.hasProperty('PROTOUR_UPLOAD_STORE_FILE')) {
                storeFile file(PROTOUR_UPLOAD_STORE_FILE)
                storePassword PROTOUR_UPLOAD_STORE_PASSWORD
                keyAlias PROTOUR_UPLOAD_KEY_ALIAS
                keyPassword PROTOUR_UPLOAD_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            applicationIdSuffix ".debug"
            manifestPlaceholders = [
                appName: "ProTour Debug",
                appIcon: "@mipmap/ic_launcher_debug"
            ]
        }
        
        staging {
            signingConfig signingConfigs.staging
            debuggable true
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            applicationIdSuffix ".staging"
            manifestPlaceholders = [
                appName: "ProTour Staging",
                appIcon: "@mipmap/ic_launcher_staging"
            ]
        }
        
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            manifestPlaceholders = [
                appName: "ProTour",
                appIcon: "@mipmap/ic_launcher"
            ]
        }
    }
    
    flavorDimensions "version"
    productFlavors {
        dev {
            dimension "version"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            resValue "string", "app_name", "ProTour Dev"
        }
        
        production {
            dimension "version"
            resValue "string", "app_name", "ProTour"
        }
    }

    // Packaging options
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
        pickFirst '**/libfbjni.so'
        pickFirst '**/libfolly_json.so'
        pickFirst '**/libglog.so'
        pickFirst '**/libhermes.so'
        pickFirst '**/libjsi.so'
        pickFirst '**/libreact_nativemodule_core.so'
        pickFirst '**/libturbomodulejsijni.so'
        pickFirst '**/libfabricjni.so'
        pickFirst '**/libmapbox-gl.so'
    }
    
    // Compile options
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    
    kotlinOptions {
        jvmTarget = '11'
    }

    // Bundle config for optimization
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:flipper-integration")
    
    // Firebase BOM
    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-perf'
    implementation 'com.google.firebase:firebase-messaging'
    
    // Multidex
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Vector icons
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.vectordrawable:vectordrawable-animated:1.1.0'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    
    // Flipper debug dependencies
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)